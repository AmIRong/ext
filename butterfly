.gitingnore文件
.gitignore 配置文件用于配置不需要加入版本管理的文件，配置好该文件可以为我们的版本管理带来很大的便利，以下是个人对于配置 .gitignore 的一些心得。

1、配置语法：

　　以斜杠“/”开头表示目录；

　　以星号“*”通配多个字符；

　　以问号“?”通配单个字符

　　以方括号“[]”包含单个字符的匹配列表；

　　以叹号“!”表示不忽略(跟踪)匹配到的文件或目录；
  
  
  licence文件
  
  
  bsd
  
  
  makefile文件
  这种依赖关系在多源文件的程序编译中尤其重要。通过这种依赖关系的定义，make 工具可避免许多不必要的编译工作。当然，利用Shell脚本也可以达到自动编译的效果，但是，Shell 脚本将全部编译任何源文件，包括哪些不必要重新编译的源文件，而 make 工具则可根据目标上一次编译的时间和目标所依赖的源文件的更新时间而自动判断应当编译哪个源文件。
  
  GNU make 的主要预定义变量
  
$*
不包含扩展名的目标文件名称。
$+
所有的依赖文件，以空格分开，并以出现的先后为序，可能包含重复的依赖文件。
$<
第一个依赖文件的名称。
$?
所有的依赖文件，以空格分开，这些依赖文件的修改日期比目标的创建日期晚。
$@
目标的完整名称。
$^
所有的依赖文件，以空格分开，不包含重复的依赖文件。
$%
如果目标是归档成员，则该变量表示目标的归档成员名称。例如，如果目标名称为
(image.o)，则 $@ 为 ，而 $% 为 image.o。
AR
归档维护程序的名称，默认值为 ar。
ARFLAGS
归档维护程序的选项。
AS
汇编程序的名称，默认值为 as。
ASFLAGS
汇编程序的选项。
CC
C编译器的名称，默认值为 cc。
CFLAGS
C编译器的选项。
CPP
C 预编译器的名称，默认值为 $(CC) -E。
CPPFLAGS
C预编译的选项。
CXX
C++编译器的名称，默认值为 g++。
CXXFLAGS
C++编译器的选项。
FC
FORTRAN编译器的名称，默认值为 f77。
FFLAGS
FORTRAN编译器的选项。



  什么是makefile？或许很多Winodws的程序员都不知道这个东西，因为那些Windows的IDE都为你做了这个工作，但我觉得要作一个好的和professional的程序员，makefile还是要懂。这就好像现在有这么多的HTML的编辑器，但如果你想成为一个专业人士，你还是要了解HTML的标识的含义。特别在Unix下的软件编译，你就不能不自己写makefile了，会不会写makefile，从一个侧面说明了一个人是否具备完成大型工程的能力。因为，makefile关系到了整个工程的编译规则。一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，makefile定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为makefile就像一个Shell脚本一样，其中也可以执行操作系统的命令。makefile带来的好处就是——“自动化编译”，一旦写好，只需要一个make命令，整个工程完全自动编译，极大的提高了软件开发的效率。make是一个命令工具，是一个解释makefile中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：Delphi的make，Visual C++的nmake，Linux下GNU的make。可见，makefile都成为了一种在工程方面的编译方法。
      现在讲述如何写makefile的文章比较少，这是我想写这篇文章的原因。当然，不同产商的make各不相同，也有不同的语法，但其本质都是在“文件依赖性”上做文章，这里，我仅对GNU的make进行讲述，我的环境是RedHat Linux 8.0，make的版本是3.80。必竟，这个make是应用最为广泛的，也是用得最多的。而且其还是最遵循于IEEE 1003.2-1992 标准的（POSIX.2）。
    在这篇文档中，将以C/C++的源码作为我们基础，所以必然涉及一些关于C/C++的编译的知识，相关于这方面的内容，还请各位查看相关的编译器的文档。这里所默认的编译器是UNIX下的GCC和CC。
    
    
    0.1 关于程序的编译和链接
   在此，我想多说关于程序编译的一些规范和方法，一般来说，无论是C、C++、还是pas，首先要把源文件编译成中间代码文件，在Windows下也就是 .obj 文件，UNIX下是 .o 文件，即 Object File，这个动作叫做编译（compile）。然后再把大量的Object File合成执行文件，这个动作叫作链接（link）。   
     
       编译时，编译器需要的是语法的正确，函数与变量的声明的正确。对于后者，通常是你需要告诉编译器头文件的所在位置（头文件中应该只是声明，而定义应该放在C/C++文件中），只要所有的语法正确，编译器就可以编译出中间目标文件。一般来说，每个源文件都应该对应于一个中间目标文件（O文件或是OBJ文件）。 
       链接时，主要是链接函数和全局变量，所以，我们可以使用这些中间目标文件（O文件或是OBJ文件）来链接我们的应用程序。链接器并不管函数所在的源文件，只管函数的中间目标文件（Object File），在大多数时候，由于源文件太多，编译生成的中间目标文件太多，而在链接时需要明显地指出中间目标文件名，这对于编译很不方便，所以，我们要给中间目标文件打个包，在Windows下这种包叫“库文件”（Library File)，也就是 .lib 文件，在UNIX下，是Archive File，也就是 .a 文件。
      总结一下，源文件首先会生成中间目标文件，再由中间目标文件生成执行文件。在编译时，编译器只检测程序语法，和函数、变量是否被声明。如果函数未被声明，编译器会给出一个警告，但可以生成Object File。而在链接程序时，链接器会在所有的Object File中找寻函数的实现，如果找不到，那到就会报链接错误码（Linker Error），在VC下，这种错误一般是：Link 2001错误，意思说是说，链接器未能找到函数的实现。你需要指定函数的ObjectFile.
      
      http://blog.csdn.net/ruglcc/article/details/7814546/
      
      
      
      
      
      代码统计利器--CLOC
      
      lint是最著名的C语言工具之一，是由贝尔实验室SteveJohnson于1979在PCC(PortableC Compiler)基础上开发的静态代码分析，一般由UNIX系统提供。
      
      
     .md文件扩展名
      
      Machine Description文件 ：包括一个目标机器支持的每个指令的指令模式的开发文件，被 GNU 编译程序集（GCC）引用，通常用于Unix系统中的编译程序。[1] 
MDCD 压缩文件 ：文件或文件组使用MDCD压缩器压缩。
Amiga LZX压缩文件 ：保存为Moneydance的数据文件，一个个人资金软件程序，比Intuit Quicken 或 Microsoft Money更小，保存银行账户，报表，预算，股票档案和其他信息。
markdown的缩写：Markdown是一种可以使用普通文本编辑器编写的轻量化标记语言，通过类似HTML的标记语法，它可以使普通文本内容具有一定的格式。该文档格式在github上有广泛应用，用于代替传统的txt文本，同时又比html简单，这样有注于专注文章内容。
